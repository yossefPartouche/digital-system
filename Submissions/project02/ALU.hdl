// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
	
	//The presets for the x-function
	Mux16(a=x, b[0..15]=false, sel=zx, out=mux1);
	//ATTENTION!!
	//Although the diagram shows that it takes the results of mux1 and potentially chooses to 
	//negate it, in the specification it refers to a generic x as the input when our input is 
	//the main x. (this also applies to y[16] 
	Not16(in=mux1, out=NegatedX);
	Mux16(a=mux1, b=NegatedX, sel=nx, out=readyX);
	
	//The presets for the y-function 
	Mux16(a=y, b[0..15]=false, sel=zy, out=mux2);
        Not16(in=mux2, out=NegatedY);
        Mux16(a=mux2, b=NegatedY, sel=ny, out=readyY);

	//The x/y-function 
	And16(a=readyX, b=readyY, out=xAndy);
	Add16(a=readyX, b=readyY,  out=xAddy);
	Mux16(a=xAndy, b=xAddy, sel=f, out=function);

	
	Not16(in=function, out=NegatedFunction);

	//From the appendix you can specify how you want to split the output 
	//Meaning it doesn't necessarily have to be just one output - useful in this case
	Mux16(a=function, b=NegatedFunction, sel=no, out=out, out[15]=ng, out[0..7]=zrLbits, out[8..15]=zrHbits);

	//We check if exists a 1 in every bit of the output - 8Way checks within itself 
	//produces a single bit result

	Or8Way(in=zrLbits, out=or1);
	Or8Way(in=zrHbits, out=or2);
	Or(a=or1, b=or2, out=or3);
	
	//if every bit in the output was 0, we negate and set to zr.
	Not(in=or3, out=zr);
}
