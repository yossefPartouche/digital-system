// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    //If instruction is an A- Instruction go to A-register
    Mux16(a=instruction ,b=outALU ,sel=instruction[15] ,out=AinstCinst);//AinstCinst== inAreg

    //A-register
    //this should be set if the MSB is 0 or 1
    //Not too sure if we should be using the input at the inAreg or at the instruction input.
    RAM16K(in=AinstCinst ,load=instruction[15] ,address=addressM ,out=outAreg);

    //D-register (current thought)
    DRegister(in=outALUinD ,load= ,out=YinALU );

    //Mux for x input value
    Mux16(a=outAreg ,b=inM ,sel=instruction[15] ,out=XinALU);

    ALU(x=XinALU ,y=YinALu ,zx=XinALU[7] ,nx=XinALU[8] ,zy=YinALU[7] ,ny=YinALU[8] ,f= ,no= ,out=outM, out=outALU , out=outALUinD zr= ,ng= );

    PC(in=outAreg ,load= ,inc= ,reset=reset ,out=pc );

}
