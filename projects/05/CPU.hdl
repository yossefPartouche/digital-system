//This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
	//makes life easier instead of refferecing bits we refference logic
	Mux16(a=false, b=instruction ,sel=instruction[15] ,
		out[0]=cJGT,
		out[1]=cJEQ,
		out[2]=cJLT,
		out[3]=cDestM,
		out[4]=cDestD,
		out[5]=cDestA,
		out[6]=cno,
		out[7]=cf,
		out[8]=cny,
		out[9]=czy,
		out[10]=cnx,
		out[11]=czx,
		out[12]=cAorM,
		out[15]=cType
 );	

	Not(in=cType ,out=NotcType );
	
	Or(a=NotcType ,b=cDestA ,out=loadA);
	
	Mux16(a=aRegOut ,b=inM ,sel=cAorM ,out=yIn );
	
	ARegister(in=aIn ,load=loadA ,out=aRegOut);

	DRegister(in=aluOut ,load=cDestD ,out=dRegOut);
	
	ALU(x=dRegOut ,y=yIn ,zx=cZX ,nx=cNX ,zy=cZY ,ny=cNY ,f=cF ,no=cNO ,out=aluOut, out=outM ,zr=zeroP ,ng=negP );
	
	//inc=1 --> go to next but may be irrelivant if jump is on
	//we output the first 15 bits as the 16 is only relevant for the instruction D or A
	PC(in=aRegOut ,load=jump,inc=1 ,reset=reset ,out=out[0..14]);
	
}
